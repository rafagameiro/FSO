/* Generated By:JavaCC: Do not edit this line. Parser.java */
package caoss.simulator.parser;

import java.util.ArrayList;
import java.util.List;

import caoss.simulator.Program;
import caoss.simulator.instructions.Instruction;
import caoss.simulator.instructions.InstructionFactory;
import caoss.simulator.instructions.InstructionList;

public class Parser implements ParserConstants {

  @SuppressWarnings("unused")
final public Program Program(String fileName) throws ParseException {
  InstructionList instructionList = new InstructionList();
  Instruction instruction;
    label_1:
    while (true) {
      instruction = Instruction();
                                  instructionList.add(instruction);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPUTATION:
      case SYSCALL:
      case MEM_LOAD:
      case MEM_STORE:
      case LOOP:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    {if (true) return new Program(fileName, instructionList);}
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
final public Instruction Instruction() throws ParseException {
        int intLiteral;
        long longLiteral;
        Token identifier;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPUTATION:
      jj_consume_token(COMPUTATION);
      intLiteral = DecimalLiteral();
          {if (true) return InstructionFactory.newComputation(intLiteral);}
      break;
    case SYSCALL:
      jj_consume_token(SYSCALL);
      identifier = jj_consume_token(IDENTIFIER);
          List<Integer> listOfints = new ArrayList<Integer>();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        jj_consume_token(15);
        ListOfDecimalLiterals(listOfints);
        jj_consume_token(16);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
          int[] array = new int[listOfints.size()];
      for (int i = 0; i < listOfints.size(); i++)
        array[i] = listOfints.get(i);
          {if (true) return InstructionFactory.newSysCall(identifier.image, array);}
      break;
    case MEM_LOAD:
      jj_consume_token(MEM_LOAD);
      longLiteral = IntegerLiteral();
          {if (true) return InstructionFactory.newMemoryLoad(longLiteral);}
      break;
    case MEM_STORE:
      jj_consume_token(MEM_STORE);
      longLiteral = IntegerLiteral();
          {if (true) return InstructionFactory.newMemoryStore(longLiteral);}
      break;
    case LOOP:
      jj_consume_token(LOOP);
      intLiteral = DecimalLiteral();
          InstructionList instructionList = new InstructionList();
          Instruction instruction;
      jj_consume_token(17);
      label_2:
      while (true) {
        instruction = Instruction();
                                            instructionList.add(instruction);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMPUTATION:
        case SYSCALL:
        case MEM_LOAD:
        case MEM_STORE:
        case LOOP:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(18);
          {if (true) return InstructionFactory.newLoop(intLiteral, instructionList);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
final public List<Integer> ListOfDecimalLiterals(List<Integer> list) throws ParseException {
  int integerLiteral;
    label_3:
    while (true) {
      integerLiteral = DecimalLiteral();
                                         list.add(integerLiteral);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL_LITERAL:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
  final public int DecimalLiteral() throws ParseException {
        Token literal;
    literal = jj_consume_token(DECIMAL_LITERAL);
          {if (true) return Integer.parseInt(literal.image);}
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
  final public long IntegerLiteral() throws ParseException {
        Token literal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
      literal = jj_consume_token(DECIMAL_LITERAL);
          {if (true) return Long.parseLong(literal.image);}
      break;
    case HEX_LITERAL:
      literal = jj_consume_token(HEX_LITERAL);
          {if (true) return Long.parseLong(literal.image.substring(2), 16);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3e,0x8000,0x3e,0x3e,0x40,0xc0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                     }
